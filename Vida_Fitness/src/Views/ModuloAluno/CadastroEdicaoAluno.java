/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Views.ModuloAluno;

import Controllers.GerenciadorPacotesController;
import Controllers.GerenciamentoAlunosController;
import Controllers.ModalidadeController;
import Models.Aluno;
import Models.Modalidade;
import Models.Pacote;
import Validators.ValidadoresDeEntradas;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.ItemEvent;
import java.sql.SQLException;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.DefaultListModel;
import javax.swing.InputVerifier;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.JRadioButton;
import javax.swing.JTextField;
import javax.swing.border.Border;

/**
 *
 * @author mathe
 */
public class CadastroEdicaoAluno extends javax.swing.JFrame {
    
    Aluno aluno;
    Aluno editarAluno;
    GerenciamentoAlunosController alunoController = new GerenciamentoAlunosController();
    String nomePacoteSelecionado;
    GerenciadorPacotesController gerenciadorPacotesController = new GerenciadorPacotesController();
    List<Pacote> listaDePacotes;
    List<Modalidade> listaDeModalides;
    ModalidadeController controllerModalidade = new ModalidadeController();
    DefaultListModel listaDeItensJlist = new DefaultListModel();
    double valor = 0.0;
    NumberFormat formatoMoeda = NumberFormat.getCurrencyInstance(Locale.CANADA);
    ValidadoresDeEntradas validadores = new ValidadoresDeEntradas();
    double valorPacela = 0.0;
    boolean cpfValidado = false;

    /**
     * Creates new form CadastroAluno
     *
     */
    public CadastroEdicaoAluno() {
        initComponents();
        popularOpcoesPacote();
        popularOpcoesModalidades();
        excluirItemSelecionadoJlist.setEnabled(false);
        addModalidadeNaLista.setEnabled(false);
        preencherComValorPacote();
        tituloPagina.setText("Cadastro de Aluno");
    }
    
    public CadastroEdicaoAluno(Aluno aluno) {
        initComponents();
        tituloPagina.setText("Edição de Aluno");
        preencherComValorPacote();
        this.editarAluno = aluno;
        popularOpcoesPacote();
        popularOpcoesModalidades();
        buttonLimparTudo.setVisible(false);
        preencherCamposParaEditar(aluno);
        if (aluno.getModalidades() != null) {
            componentesModalidade(true);
            ativarModalidades.setSelected(true);
        }
        if (aluno.getPacote() != null) {
            componentesModalidade(false);
            ativarPacote.setSelected(true);
            pacotesDisponiveis.setEnabled(true);
            for (int i = 0; i < listaDePacotes.size(); i++) {
                if (listaDePacotes.get(i).getNomePacote().equalsIgnoreCase(aluno.getPacote().getNomePacote())) {
                    pacotesDisponiveis.setSelectedIndex(i + 1);
                    break;
                }
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        telaCadastroJPanel = new javax.swing.JPanel();
        buttonSalvarAluno = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        campoNome = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        campoTelefoneSecundario = new javax.swing.JTextField();
        try{
            javax.swing.text.MaskFormatter data= new javax.swing.text.MaskFormatter("(##)# ####-####");
            campoTelefoneSecundario = new javax.swing.JFormattedTextField(data);
        }
        catch (Exception e){
        }
        jLabel5 = new javax.swing.JLabel();
        campoCPF = new javax.swing.JTextField();
        try{
            javax.swing.text.MaskFormatter data= new javax.swing.text.MaskFormatter("###.###.###-##");
            campoCPF = new javax.swing.JFormattedTextField(data);
        }
        catch (Exception e){
        }
        pacotesDisponiveis = new javax.swing.JComboBox<>();
        ativarPacote = new javax.swing.JRadioButton();
        modalidadesDisponiveis = new javax.swing.JComboBox<>();
        ativarModalidades = new javax.swing.JRadioButton();
        jLabel7 = new javax.swing.JLabel();
        campoTelefonePrincipal = new javax.swing.JTextField();
        try{
            javax.swing.text.MaskFormatter data= new javax.swing.text.MaskFormatter("(##)# ####-####");
            campoTelefonePrincipal = new javax.swing.JFormattedTextField(data);
        }
        catch (Exception e){
        }
        excluirItemSelecionadoJlist = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        campoCEP = new javax.swing.JTextField();
        try{
            javax.swing.text.MaskFormatter data= new javax.swing.text.MaskFormatter("#####-###");
            campoCEP = new javax.swing.JFormattedTextField(data);
        }
        catch (Exception e){
        }
        jLabel10 = new javax.swing.JLabel();
        campoEndereco = new javax.swing.JTextField();
        campoBairro = new javax.swing.JTextField();
        descModalidadesSelecionadas = new javax.swing.JLabel();
        addModalidadeNaLista = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        listaDeModalidadesAdd = new javax.swing.JList<>();
        buttonLimparTudo = new javax.swing.JButton();
        campoApresentaValorCadastro = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        tituloPagina = new javax.swing.JLabel();
        checkPagamentoCartaoCredito = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setResizable(false);
        setType(java.awt.Window.Type.POPUP);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        telaCadastroJPanel.setBackground(new java.awt.Color(27, 25, 30));
        telaCadastroJPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        buttonSalvarAluno.setBackground(new java.awt.Color(84, 182, 19));
        buttonSalvarAluno.setFont(new java.awt.Font("Segoe UI Symbol", 1, 12)); // NOI18N
        buttonSalvarAluno.setForeground(new java.awt.Color(255, 255, 255));
        buttonSalvarAluno.setText("Salvar");
        buttonSalvarAluno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSalvarAlunoActionPerformed(evt);
            }
        });
        telaCadastroJPanel.add(buttonSalvarAluno, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 550, 99, 37));

        jButton2.setBackground(new java.awt.Color(255, 51, 51));
        jButton2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("Cancelar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        telaCadastroJPanel.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 550, 94, 37));

        jLabel1.setFont(new java.awt.Font("Segoe UI Symbol", 1, 16)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Nome:");
        telaCadastroJPanel.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 110, 63, 34));

        campoNome.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        telaCadastroJPanel.add(campoNome, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 110, 270, 30));

        jLabel2.setFont(new java.awt.Font("Segoe UI Symbol", 1, 16)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Telefone Principal:");
        telaCadastroJPanel.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 210, -1, -1));

        jLabel4.setFont(new java.awt.Font("Segoe UI Symbol", 1, 16)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Telefone Secundário:");
        telaCadastroJPanel.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 250, -1, -1));

        campoTelefoneSecundario.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        campoTelefoneSecundario.setInputVerifier(new InputVerifier() {
            ;
            Border originalBorder;

            @Override
            public boolean verify(JComponent input) {
                JTextField comp = (JTextField) input;
                return !(validadores.separarNumeros(comp.getText()).length() < 11);
            }

            @Override
            public boolean shouldYieldFocus(JComponent input) {
                boolean isValid = verify(input);

                if (!isValid) {
                    originalBorder = originalBorder == null ? input.getBorder() : originalBorder;
                    input.setBorder(BorderFactory.createLineBorder(Color.red, 2));
                } else {
                    if (originalBorder != null) {
                        input.setBorder(originalBorder);
                        originalBorder = null;
                    }
                }
                return isValid; //To change body of generated methods, choose Tools | Templates.
            }
        });
        telaCadastroJPanel.add(campoTelefoneSecundario, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 253, 270, 30));

        jLabel5.setFont(new java.awt.Font("Segoe UI Symbol", 1, 16)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("CPF:");
        telaCadastroJPanel.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 160, -1, -1));

        campoCPF.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        campoCPF.setInputVerifier(new InputVerifier() {
            ;
            Border originalBorder;

            @Override
            public boolean verify(JComponent input) {
                JTextField comp = (JTextField) input;
                return !(validadores.separarNumeros(comp.getText()).length() < 11);
            }

            @Override
            public boolean shouldYieldFocus(JComponent input) {
                boolean isValid = verify(input);

                if (!isValid) {
                    originalBorder = originalBorder == null ? input.getBorder() : originalBorder;
                    input.setBorder(BorderFactory.createLineBorder(Color.red, 2));
                } else {
                    if (originalBorder != null) {
                        input.setBorder(originalBorder);
                        originalBorder = null;
                    }
                }
                return isValid; //To change body of generated methods, choose Tools | Templates.
            }
        });
        campoCPF.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                campoCPFFocusLost(evt);
            }
        });
        telaCadastroJPanel.add(campoCPF, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 160, 270, 30));

        pacotesDisponiveis.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione um pacote" }));
        pacotesDisponiveis.setEnabled(false);
        telaCadastroJPanel.add(pacotesDisponiveis, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 350, 270, 31));

        buttonGroup1.add(ativarPacote);
        ativarPacote.setForeground(new java.awt.Color(255, 255, 255));
        ativarPacote.setText("Ativar Pacotes");
        ativarPacote.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ativarPacoteActionPerformed(evt);
            }
        });
        telaCadastroJPanel.add(ativarPacote, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 350, 130, -1));

        modalidadesDisponiveis.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione uma modalidade" }));
        modalidadesDisponiveis.setEnabled(false);
        telaCadastroJPanel.add(modalidadesDisponiveis, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 390, 270, 31));

        buttonGroup1.add(ativarModalidades);
        ativarModalidades.setForeground(new java.awt.Color(255, 255, 255));
        ativarModalidades.setText("Ativar Modalidades");
        ativarModalidades.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ativarModalidadesActionPerformed(evt);
            }
        });
        telaCadastroJPanel.add(ativarModalidades, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 390, 130, -1));

        jLabel7.setFont(new java.awt.Font("Segoe UI Symbol", 1, 16)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Modalidades:");
        telaCadastroJPanel.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 390, -1, -1));

        campoTelefonePrincipal.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        campoTelefonePrincipal.setInputVerifier(new InputVerifier() {
            ;
            Border originalBorder;

            @Override
            public boolean verify(JComponent input) {
                JTextField comp = (JTextField) input;
                return !(validadores.separarNumeros(comp.getText()).length() < 11);
            }

            @Override
            public boolean shouldYieldFocus(JComponent input) {
                boolean isValid = verify(input);

                if (!isValid) {
                    originalBorder = originalBorder == null ? input.getBorder() : originalBorder;
                    input.setBorder(BorderFactory.createLineBorder(Color.red, 2));
                } else {
                    if (originalBorder != null) {
                        input.setBorder(originalBorder);
                        originalBorder = null;
                    }
                }
                return isValid; //To change body of generated methods, choose Tools | Templates.
            }
        });
        telaCadastroJPanel.add(campoTelefonePrincipal, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 205, 270, -1));

        excluirItemSelecionadoJlist.setBackground(new java.awt.Color(0, 153, 255));
        excluirItemSelecionadoJlist.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        excluirItemSelecionadoJlist.setForeground(new java.awt.Color(255, 255, 255));
        excluirItemSelecionadoJlist.setText("Excluir Item da Lista");
        excluirItemSelecionadoJlist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                excluirItemSelecionadoJlistActionPerformed(evt);
            }
        });
        telaCadastroJPanel.add(excluirItemSelecionadoJlist, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 550, 180, 30));

        jLabel8.setFont(new java.awt.Font("Segoe UI Symbol", 1, 16)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Pacotes:");
        telaCadastroJPanel.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 350, -1, 20));

        jLabel9.setFont(new java.awt.Font("Segoe UI Symbol", 1, 16)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("CEP:");
        telaCadastroJPanel.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 170, -1, -1));

        campoCEP.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        campoCEP.setInputVerifier(new InputVerifier() {
            ;
            Border originalBorder;

            @Override
            public boolean verify(JComponent input) {
                JTextField comp = (JTextField) input;
                return !(validadores.separarNumeros(comp.getText()).length() < 8);
            }

            @Override
            public boolean shouldYieldFocus(JComponent input) {
                boolean isValid = verify(input);

                if (!isValid) {
                    originalBorder = originalBorder == null ? input.getBorder() : originalBorder;
                    input.setBorder(BorderFactory.createLineBorder(Color.red, 2));
                } else {
                    if (originalBorder != null) {
                        input.setBorder(originalBorder);
                        originalBorder = null;
                    }
                }
                return isValid; //To change body of generated methods, choose Tools | Templates.
            }
        });
        telaCadastroJPanel.add(campoCEP, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 160, 270, 30));

        jLabel10.setFont(new java.awt.Font("Segoe UI Symbol", 1, 16)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Endereço:");
        telaCadastroJPanel.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 220, -1, -1));

        campoEndereco.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        telaCadastroJPanel.add(campoEndereco, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 210, 270, 30));

        campoBairro.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        telaCadastroJPanel.add(campoBairro, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 260, 270, 30));

        descModalidadesSelecionadas.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        descModalidadesSelecionadas.setForeground(new java.awt.Color(255, 255, 255));
        descModalidadesSelecionadas.setText("Modalidades Selecionas:");
        telaCadastroJPanel.add(descModalidadesSelecionadas, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 420, 170, 40));

        addModalidadeNaLista.setBackground(new java.awt.Color(0, 153, 255));
        addModalidadeNaLista.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        addModalidadeNaLista.setForeground(new java.awt.Color(255, 255, 255));
        addModalidadeNaLista.setText("Adicionar");
        addModalidadeNaLista.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addModalidadeNaListaActionPerformed(evt);
            }
        });
        telaCadastroJPanel.add(addModalidadeNaLista, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 550, 120, 30));

        listaDeModalidadesAdd.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        listaDeModalidadesAdd.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(listaDeModalidadesAdd);

        telaCadastroJPanel.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 460, 240, 80));

        buttonLimparTudo.setBackground(new java.awt.Color(255, 204, 0));
        buttonLimparTudo.setFont(new java.awt.Font("Segoe UI Symbol", 1, 12)); // NOI18N
        buttonLimparTudo.setForeground(new java.awt.Color(255, 255, 255));
        buttonLimparTudo.setText("Limpar Tudo");
        buttonLimparTudo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonLimparTudoActionPerformed(evt);
            }
        });
        telaCadastroJPanel.add(buttonLimparTudo, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 120, -1, 34));

        campoApresentaValorCadastro.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        campoApresentaValorCadastro.setEnabled(false);
        telaCadastroJPanel.add(campoApresentaValorCadastro, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 370, 150, 30));

        jLabel3.setFont(new java.awt.Font("Segoe UI Symbol", 3, 16)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Valor inscrição:");
        telaCadastroJPanel.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 340, 130, 20));

        jLabel12.setFont(new java.awt.Font("Segoe UI Symbol", 1, 16)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("Bairro:");
        telaCadastroJPanel.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 260, -1, -1));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("A opção que estiver ativada, será a cadastrada.");
        telaCadastroJPanel.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 310, 300, -1));

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 0, 51));
        jLabel13.setText("*");
        telaCadastroJPanel.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 300, 30, 20));
        telaCadastroJPanel.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 330, 310, 10));
        telaCadastroJPanel.add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 100, 1000, 10));

        tituloPagina.setFont(new java.awt.Font("Segoe UI Black", 1, 36)); // NOI18N
        tituloPagina.setForeground(new java.awt.Color(255, 255, 255));
        tituloPagina.setText("Cadastro de Aluno");
        telaCadastroJPanel.add(tituloPagina, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 50, -1, -1));

        checkPagamentoCartaoCredito.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        checkPagamentoCartaoCredito.setForeground(new java.awt.Color(255, 255, 255));
        checkPagamentoCartaoCredito.setText("Pagamento Efetuado com cartão de crédito?");
        checkPagamentoCartaoCredito.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkPagamentoCartaoCreditoActionPerformed(evt);
            }
        });
        telaCadastroJPanel.add(checkPagamentoCartaoCredito, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 440, 350, 40));

        getContentPane().add(telaCadastroJPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1000, 610));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        MenuAlunos menuAluno = new MenuAlunos();
        menuAluno.setVisible(true);
        dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void buttonSalvarAlunoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSalvarAlunoActionPerformed
        if (editarAluno == null) {
            if (verificarCampoVazio() == -1 && (verificarQuantidadeNumCamposEspeciais(campoTelefonePrincipal.getText()) == 11
                    && verificarQuantidadeNumCamposEspeciais(campoTelefoneSecundario.getText()) == 11)) {
                if (cpfValidado) {
                    aluno = new Aluno();
                    aluno.setNome(campoNome.getText());
                    aluno.setTelefonePrincipal(campoTelefonePrincipal.getText());
                    aluno.setTelefoneSecundario(campoTelefoneSecundario.getText());
                    aluno.setEndereco(campoEndereco.getText());
                    aluno.setCpf(campoCPF.getText());
                    aluno.setBairro(campoBairro.getText());
                    aluno.setCep(campoCEP.getText());
                    aluno.setInadimplente(false);
                    if (checkPagamentoCartaoCredito.isSelected()) {
                        aluno.setPagamentoComCartao(true);
                    } else {
                        aluno.setPagamentoComCartao(false);
                    }
                    if (ativarModalidades.isSelected()) {
                        List<Modalidade> modalidades = identificarListaDeModalidades();
                        aluno.setPacote(new Pacote());
                        aluno.setModalidades(modalidades);
                    } else if (ativarPacote.isSelected()) {
                        Pacote pacote = identificarPacoteSelecionado();
                        aluno.setModalidades(new ArrayList<>());
                        aluno.setPacote(pacote);
                    }
                    try {
                        alunoController.salvarCadastroAluno(aluno);
                        JOptionPane.showMessageDialog(this, "Aluno salvo com sucesso!");
                        MenuAlunos menuAlunos = new MenuAlunos();
                        menuAlunos.setVisible(true);
                        dispose();
                    } catch (SQLException e) {
                        JOptionPane.showMessageDialog(this, "Ops!! Algo deu errado. Tente novamente.");
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Ops!! O CPF foi deixado em branco ou ainda não foi validado.");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Ops!! Algum campo foi deixado em branco.");
            }
        } else {
            if (verificarCampoVazio() == -1 && (verificarQuantidadeNumCamposEspeciais(campoTelefonePrincipal.getText()) == 11
                    && verificarQuantidadeNumCamposEspeciais(campoTelefoneSecundario.getText()) == 11)) {
                if (cpfValidado || campoCPF.getText().equalsIgnoreCase(editarAluno.getCpf())) {
                    editarAluno.setNome(campoNome.getText());
                    editarAluno.setTelefonePrincipal(campoTelefonePrincipal.getText());
                    editarAluno.setTelefoneSecundario(campoTelefoneSecundario.getText());
                    editarAluno.setEndereco(campoEndereco.getText());
                    editarAluno.setCpf(campoCPF.getText());
                    editarAluno.setInadimplente(false);
                    editarAluno.setBairro(campoBairro.getText());
                    editarAluno.setCep(campoCEP.getText());
                    if (checkPagamentoCartaoCredito.isSelected()) {
                        editarAluno.setPagamentoComCartao(true);
                    } else {
                        editarAluno.setPagamentoComCartao(false);
                    }
                    if (ativarModalidades.isSelected()) {
                        List<Modalidade> modalidades = identificarListaDeModalidades();
                        editarAluno.setModalidades(modalidades);
                        editarAluno.setPacote(null);
                    }
                    if (ativarPacote.isSelected()) {
                        Pacote pacote = identificarPacoteSelecionado();
                        editarAluno.setPacote(pacote);
                        editarAluno.setModalidades(null);
                    }
                    try {
                        alunoController.editarCadastroAluno(editarAluno);
                        JOptionPane.showMessageDialog(this, "Edição realizada com sucesso!");
                        MenuAlunos menuAlunos = new MenuAlunos();
                        menuAlunos.setVisible(true);
                        dispose();
                    } catch (SQLException e) {
                        JOptionPane.showMessageDialog(this, "Ops!! Algo deu errado. Tente novamente.");
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Ops!! O CPF foi deixado em branco ou ainda não foi validado.");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Ops!! Algum campo foi deixado em branco.");
            }
        }
    }//GEN-LAST:event_buttonSalvarAlunoActionPerformed

    private void ativarPacoteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ativarPacoteActionPerformed
        if (ativarPacote.isSelected()) {
            pacotesDisponiveis.setEnabled(true);
            componentesModalidade(false);
            listaDeItensJlist.clear();
            listaDeModalidadesAdd.setModel(listaDeItensJlist);
            campoApresentaValorCadastro.setText("");
            valor = 0;
        }
    }//GEN-LAST:event_ativarPacoteActionPerformed

    private void ativarModalidadesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ativarModalidadesActionPerformed
        if (ativarModalidades.isSelected()) {
            componentesModalidade(true);
            pacotesDisponiveis.setEnabled(false);
            campoApresentaValorCadastro.setText("");
            valor = 0;
            pacotesDisponiveis.setSelectedIndex(0);
        }
    }//GEN-LAST:event_ativarModalidadesActionPerformed

    private void excluirItemSelecionadoJlistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_excluirItemSelecionadoJlistActionPerformed
        int indiceModalidade = listaDeModalidadesAdd.getSelectedIndex();
        double valorParaSubtrair;
        if (listaDeModalidadesAdd.getModel().getSize() < 1) {
            JOptionPane.showMessageDialog(this, "Ops!! Sua lista está vazia.");
        } else {
            if (indiceModalidade != -1) {
                valorParaSubtrair = encontrarValorString(listaDeItensJlist.get(indiceModalidade).toString());
                valor -= valorParaSubtrair;
                campoApresentaValorCadastro.setText("R" + formatoMoeda.format(valor));
                listaDeItensJlist.removeElementAt(indiceModalidade);
                listaDeModalidadesAdd.setModel(listaDeItensJlist);
            } else {
                JOptionPane.showMessageDialog(this, "Ops!! Nenhum elemento foi selecionado.");
            }
        }
    }//GEN-LAST:event_excluirItemSelecionadoJlistActionPerformed

    private void addModalidadeNaListaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addModalidadeNaListaActionPerformed
        if (modalidadesDisponiveis.getSelectedIndex() != 0) {
            descModalidadesSelecionadas.setVisible(true);
            Modalidade modalidade = identificarModalidadeSelecionada();
            if (!verificarDuplicidadeJList(modalidade.getNome() + ", R$" + modalidade.getValorModalidade())) {
                listaDeItensJlist.addElement("" + modalidade.getNome() + ", R$" + modalidade.getValorModalidade());
                listaDeModalidadesAdd.setModel(listaDeItensJlist);
                valor += modalidade.getValorModalidade();
                
                campoApresentaValorCadastro.setText("R" + formatoMoeda.format(valor));
            } else {
                JOptionPane.showMessageDialog(this, "Ops!! Você já selecionou essa modalidade.");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Ops!! Selecione uma modalidade válida.");
        }

    }//GEN-LAST:event_addModalidadeNaListaActionPerformed

    private void buttonLimparTudoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonLimparTudoActionPerformed
        limparTodosCampos();
    }//GEN-LAST:event_buttonLimparTudoActionPerformed

    private void checkPagamentoCartaoCreditoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkPagamentoCartaoCreditoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkPagamentoCartaoCreditoActionPerformed

    private void campoCPFFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_campoCPFFocusLost
        if (verificarQuantidadeNumCamposEspeciais(campoCPF.getText()) == 11) {
            try {
                if (editarAluno != null) {
                    if (campoCPF.getText().equalsIgnoreCase(editarAluno.getCpf())) {
                        cpfValidado = true;
                    } else {
                        if (alunoController.verificarExistenciaCpf(campoCPF.getText())) {
                            JOptionPane.showMessageDialog(this, "Ops!! Este CPF já foi cadastrado no sistema.");
                            campoCPF.setText("");
                            cpfValidado = false;
                        } else {
                            cpfValidado = true;
                        }
                    }
                } else {
                    if (alunoController.verificarExistenciaCpf(campoCPF.getText())) {
                        JOptionPane.showMessageDialog(this, "Ops!! Este CPF já foi cadastrado no sistema.");
                        campoCPF.setText("");
                        cpfValidado = false;
                    } else {
                        cpfValidado = true;
                    }
                }
            } catch (SQLException ex) {
                Logger.getLogger(CadastroEdicaoAluno.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_campoCPFFocusLost
    
    private int verificarQuantidadeNumCamposEspeciais(String text) {
        int qtndNumeros = 0;
        for (int i = 0; i < text.length(); i++) {
            if (Character.isDigit(text.charAt(i))) {
                qtndNumeros++;
            }
        }
        return qtndNumeros;
    }
    
    private void componentesModalidade(boolean condicao) {
        modalidadesDisponiveis.setEnabled(condicao);
        listaDeModalidadesAdd.setEnabled(condicao);
        addModalidadeNaLista.setEnabled(condicao);
        excluirItemSelecionadoJlist.setEnabled(condicao);
    }
    
    private void preencherCamposParaEditar(Aluno aluno) {
        campoNome.setText(aluno.getNome());
        campoTelefonePrincipal.setText(aluno.getTelefonePrincipal());
        campoBairro.setText(aluno.getBairro());
        campoCEP.setText(aluno.getCep());
        campoTelefoneSecundario.setText(aluno.getTelefoneSecundario());
        campoCPF.setText(aluno.getCpf());
        campoEndereco.setText(aluno.getEndereco());
        checkPagamentoCartaoCredito.setSelected(aluno.isPagamentoComCartao());
        if (aluno.getModalidades() != null || !aluno.getModalidades().isEmpty()) {
            for (int i = 0; i < aluno.getModalidades().size(); i++) {
                String nomeModalidade = aluno.getModalidades().get(i).getNome();
                float valorModalidade = aluno.getModalidades().get(i).getValorModalidade();
                float valorTotal = 0;
                listaDeItensJlist.addElement("" + nomeModalidade + ", R$" + valorModalidade);
                listaDeModalidadesAdd.setModel(listaDeItensJlist);
                valorTotal = aluno.getModalidades().stream().map((modalidade) -> modalidade.getValorModalidade()).reduce(valorTotal, (accumulator, _item) -> accumulator + _item);
                campoApresentaValorCadastro.setText("R" + formatoMoeda.format(valorTotal));
                valor = valorTotal;
            }
        }
    }
    
    private double encontrarValorString(String text) {
        char caractere;
        double valorRecuperado = -1.0;
        for (int i = 0; i < text.length(); i++) {
            caractere = text.charAt(i);
            if (caractere == '$') {
                valorRecuperado = Double.parseDouble(text.substring(i + 1, text.length()));
                return valorRecuperado;
            }
        }
        return valorRecuperado;
    }
    
    private String encontrarNomeString(String text) {
        char caractere;
        String nome = "";
        for (int i = 0; i < text.length(); i++) {
            caractere = text.charAt(i);
            if (caractere == ',') {
                nome = text.substring(0, i);
                return nome;
            }
        }
        return nome;
    }
    
    private boolean verificarDuplicidadeJList(String valor) {
        for (int i = 0; i < listaDeModalidadesAdd.getModel().getSize(); i++) {
            if (listaDeModalidadesAdd.getModel().getElementAt(i).equalsIgnoreCase(valor)) {
                return true;
            }
        }
        return false;
    }
    
    private List<Modalidade> identificarListaDeModalidades() {
        List<Modalidade> modalidadesSelecionadas = new ArrayList<>();
        String nome;
        for (int i = 0; i < listaDeModalidadesAdd.getModel().getSize(); i++) {
            for (int j = 0; j < listaDeModalides.size(); j++) {
                nome = encontrarNomeString(listaDeModalidadesAdd.getModel().getElementAt(i));
                if (nome.equalsIgnoreCase(listaDeModalides.get(j).getNome())) {
                    modalidadesSelecionadas.add(listaDeModalides.get(j));
                }
            }
        }
        return modalidadesSelecionadas;
    }
    
    private Modalidade identificarModalidadeSelecionada() {
        for (int i = 0; i < listaDeModalides.size(); i++) {
            if (listaDeModalides.get(i).getNome().equalsIgnoreCase(modalidadesDisponiveis.getSelectedItem().toString())) {
                return listaDeModalides.get(i);
            }
            
        }
        return null;
    }
    
    private Pacote identificarPacoteSelecionado() {
        for (int i = 0; i < listaDePacotes.size(); i++) {
            if (listaDePacotes.get(i).getNomePacote().equalsIgnoreCase(pacotesDisponiveis.getSelectedItem().toString())) {
                return listaDePacotes.get(i);
            }
        }
        return null;
    }
    
    private void popularOpcoesPacote() {
        listaDePacotes = gerenciadorPacotesController.getListaDePacotes();
        Pacote pacoteAux;
        int indexAux = 0;
        for (Pacote pacote : listaDePacotes) {
            pacoteAux = pacote;
            if (indexAux == 0) {
                pacotesDisponiveis.addItem(pacote.getNomePacote());
            } else if (pacoteAux.getIdPacote() != listaDePacotes.get(indexAux - 1).getIdPacote()) {
                pacotesDisponiveis.addItem(pacote.getNomePacote());
            }
            indexAux++;
        }
    }
    
    private void popularOpcoesModalidades() {
        listaDeModalides = controllerModalidade.getModalidades();
        listaDeModalides.forEach((modalidade) -> {
            modalidadesDisponiveis.addItem(modalidade.getNome());
        });
    }
    
    private void limparTodosCampos() {
        Component components[] = telaCadastroJPanel.getComponents();
        for (Component component : components) {
            if (component instanceof JTextField) {
                ((JTextField) component).setText("");
            }
            if (component instanceof JComboBox) {
                ((JComboBox) component).setSelectedIndex(0);
            }
        }
        checkPagamentoCartaoCredito.setSelected(false);
        listaDeItensJlist.removeAllElements();
        listaDeModalidadesAdd.setModel(listaDeItensJlist);
        valor = 0;
    }
    
    private int verificarCampoVazio() {
        Component components[] = telaCadastroJPanel.getComponents();
        int controle = -1;
        for (Component component : components) {
            if (component instanceof JTextField) {
                if (((JTextField) component).getText().isEmpty()) {
                    controle = 0;
                }
            }
            if (component instanceof JComboBox) {
                if (((JComboBox) component).getSelectedIndex() < 0) {
                    controle = 0;
                }
            }
            if (component instanceof JRadioButton) {
                if (((JRadioButton) component).isSelected()) {
                    controle = -1;
                }
            }
        }
        return controle;
    }
    
    private void preencherComValorPacote() {
        nomePacoteSelecionado = "";
        pacotesDisponiveis.addItemListener((ItemEvent e) -> {
            double resultado = 0;
            Object item = e.getItem();
            if (e.getStateChange() == ItemEvent.SELECTED) {
                nomePacoteSelecionado = item.toString();
                for (int i = 0; i < listaDePacotes.size(); i++) {
                    if (listaDePacotes.get(i).getNomePacote().equalsIgnoreCase(nomePacoteSelecionado)) {
                        for (int j = 0; j < listaDePacotes.get(i).getListaDeModalidades().size(); j++) {
                            resultado += listaDePacotes.get(i).getListaDeModalidades().get(j).getValorModalidade();
                        }
                        resultado *= listaDePacotes.get(i).getDuracao();
                        resultado -= listaDePacotes.get(i).getValorDesconto();
                        campoApresentaValorCadastro.setText("R" + formatoMoeda.format(resultado));
                        break;
                    }
                }
            }
            if (e.getStateChange() == ItemEvent.SELECTED) {
                if (item.toString().equalsIgnoreCase("Selecione um pacote")) {
                    campoApresentaValorCadastro.setText("");
                }
            }
        });
        
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CadastroEdicaoAluno.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new CadastroEdicaoAluno().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addModalidadeNaLista;
    private javax.swing.JRadioButton ativarModalidades;
    private javax.swing.JRadioButton ativarPacote;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton buttonLimparTudo;
    private javax.swing.JButton buttonSalvarAluno;
    private javax.swing.JTextField campoApresentaValorCadastro;
    private javax.swing.JTextField campoBairro;
    private javax.swing.JTextField campoCEP;
    private javax.swing.JTextField campoCPF;
    private javax.swing.JTextField campoEndereco;
    private javax.swing.JTextField campoNome;
    private javax.swing.JTextField campoTelefonePrincipal;
    private javax.swing.JTextField campoTelefoneSecundario;
    private javax.swing.JCheckBox checkPagamentoCartaoCredito;
    private javax.swing.JLabel descModalidadesSelecionadas;
    private javax.swing.JButton excluirItemSelecionadoJlist;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JList<String> listaDeModalidadesAdd;
    private javax.swing.JComboBox<String> modalidadesDisponiveis;
    private javax.swing.JComboBox<String> pacotesDisponiveis;
    private javax.swing.JPanel telaCadastroJPanel;
    private javax.swing.JLabel tituloPagina;
    // End of variables declaration//GEN-END:variables
}
